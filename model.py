#importing libs
import os
import pandas as pd
import numpy
import pickle
import pefile
import sklearn.ensemble as ek
from sklearn import  tree, linear_model
from sklearn.model_selection import cross_validate

from sklearn.feature_selection import SelectFromModel
from sklearn.externals import joblib
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix
from sklearn.pipeline import make_pipeline
from sklearn import preprocessing
from sklearn import svm
from sklearn.linear_model import LinearRegression


#import the dataset in dataframe using pandas

dataset = pd.read_csv(r'C:\Users\lenovo\Downloads\Malware-detection-using-Machine-Learning-master\data.csv', sep = '|')
#features values
X = dataset.drop(['Name', 'md5', 'legitimate'], axis = 1)

#target values
y = dataset['legitimate']

#ExtraTreesClassifier helps us to know  the most correlated feaures
extratrees = ek.ExtraTreesClassifier().fit(X,y)
model = SelectFromModel(extratrees, prefit=True)
X_new = model.transform(X)

#the new numer of features to handel
nbfeatures = X_new.shape[1]
#spliting the data to train and test 
from sklearn.model_selection import cross_validate
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20)

#knowing the names of the new featues to work with 
features = []
index = numpy.argsort(extratrees.feature_importances_)[::-1][:nbfeatures]
for f in range(nbfeatures):
    print("%d. feature %s (%f)" % (f + 1, dataset.columns[2+index[f]], extratrees.feature_importances_[index[f]]))
    #print(2+index[f])
    #print(index[f])
    features.append(dataset.columns[2+f])
    
    #testing the algorithms and chose the algo with the best score 
    model = { "DecisionTree":tree.DecisionTreeClassifier(max_depth=10),
         "RandomForest":ek.RandomForestClassifier(n_estimators=50),
         "Adaboost":ek.AdaBoostClassifier(n_estimators=50),
         "GradientBoosting":ek.GradientBoostingClassifier(n_estimators=50),
         "GNB":GaussianNB(),
         "LinearRegression":LinearRegression()   
}
results = {}
for algo in model:
    clf = model[algo]
    clf.fit(X,y)
    score = clf.score(X_test,y_test)
    print ("%s : %s " %(algo, score))
    results[algo] = score
winner = max(results, key=results.get)
joblib.dump(model[winner],'classifier2.pkl')
#with open(features.pkl, 'w') as f:  
#    pickle.dump(features, f)
clf = model[winner]


# Load classifier
clf = joblib.load('classifier2.pkl')
