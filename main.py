import numpy as np
from flask import Flask, request, jsonify, render_template
import pickle
from sklearn.externals import joblib 
from joblib import dump, load
from flask_bootstrap import Bootstrap
import os
import pefile
import array
import pickle
import glob
import sys
import argparse
import winsound

#loading the ML model
model = joblib.load('classifier.pkl')

app = Flask(__name__)
Bootstrap(app)
malware=[]
ligim=[]

# list of features which the model takes as input for classification
features=['Machine',
 'SizeOfOptionalHeader',
 'Characteristics',
 'MajorLinkerVersion',
 'MinorLinkerVersion',
 'SizeOfCode',
 'SizeOfInitializedData',
 'SizeOfUninitializedData',
 'AddressOfEntryPoint']
 
#function for extracting PE file features
def extract_infos(fpath):
    res = {}
    pe = pefile.PE(fpath)
    res['Machine'] = pe.FILE_HEADER.Machine
    res['SizeOfOptionalHeader'] = pe.FILE_HEADER.SizeOfOptionalHeader
    res['Characteristics'] = pe.FILE_HEADER.Characteristics
    res['MajorLinkerVersion'] = pe.OPTIONAL_HEADER.MajorLinkerVersion
    res['MinorLinkerVersion'] = pe.OPTIONAL_HEADER.MinorLinkerVersion
    res['SizeOfCode'] = pe.OPTIONAL_HEADER.SizeOfCode
    res['SizeOfInitializedData'] = pe.OPTIONAL_HEADER.SizeOfInitializedData
    res['SizeOfUninitializedData'] = pe.OPTIONAL_HEADER.SizeOfUninitializedData
    res['AddressOfEntryPoint'] = pe.OPTIONAL_HEADER.AddressOfEntryPoint
    
    return res


@app.route('/')
def home():
    return render_template('index.html')
    
@app.route('/scan')
def scan():
    return render_template('scan.html')
    
@app.route('/scan',methods=['POST'])

def predict():
    #inport path file/folder post request
    req = request.form
    fold_path=req.get('folder')
    file_path=req.get('file')
    
    #folder scan
    if fold_path:
        files=glob.glob(r"%s\*.exe"%fold_path)
        fil_num=len(files)
        del malware[:] 
        for x in files:
            #   
            data = extract_infos(r"%s"%x)
            pe_features = map(lambda x:data[x], features)
            
            a=list(data.values())   

            res= model.predict([a])
            i=0
            if str(res[0])=='0':
                
                malware.append(x)
                i+=1

            else:
                print()
        if i!=0:
            filename = 'avast-virus-detected-sound.wav'
            winsound.PlaySound(filename, winsound.SND_FILENAME)
        print(i)        
        filename = 'speech.wav'
        winsound.PlaySound(filename, winsound.SND_FILENAME)
        return render_template('scan.html', ll=str(fil_num)+" files are scanned",tt=malware,msg='Repport Of Folder Scan: ',mesg=' is a Malware',num_mal=len(malware))
        
    #file scan    
    elif file_path:
        del malware[:]
        data = extract_infos(r"%s"%file_path)
        a=list(data.values())
       
        res= model.predict([a])   
        if str(res[0])=='0':
            malware.append(file_path)

            filename = 'avast-virus-detected-sound.wav'
            winsound.PlaySound(filename, winsound.SND_FILENAME)
            file=file_path
            return render_template('scan.html', tt=malware)
        else:
            filename = 'speech.wav'
            winsound.PlaySound(filename, winsound.SND_FILENAME)           
            return render_template('scan.html', ll='ligitimate file')    

 
  
    
    

    
    
if __name__ == "__main__":
    app.run(debug=True)